Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !Object subclass: #Customer	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/22/2017 21:15'!isIdentifiedAs: anIdType numbered: anIdNumber		^identificationType = anIdType and: [ identificationNumber = anIdNumber ]! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'FourcadeGaston 11/22/2017 20:51'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'FourcadeGaston 11/22/2017 20:51'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'FourcadeGaston 11/22/2017 20:51'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'FourcadeGaston 11/22/2017 20:51'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:19'!setUp	system := Environment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 20:45'!tearDown	system commit.	system stop! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'FourcadeGaston 11/22/2017 20:51'!alwaysImportedCustomer	^ system		customerIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber		ifNone: [ self fail ]! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'FourcadeGaston 11/22/2017 20:53'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomersSize equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'FourcadeGaston 11/22/2017 20:51'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'FourcadeGaston 11/22/2017 20:51'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assert: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2.	self		assert: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'importing' stamp: 'FourcadeGaston 11/22/2017 21:02'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream on: system) import! !!CustomerImportTest methodsFor: 'importing' stamp: 'FourcadeGaston 11/22/2017 20:50'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber		ifNone: noneBlock! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerSystem methodsFor: 'customers' stamp: 'FourcadeGaston 11/22/2017 21:09'!isCustomersEmpty
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:09'!stop
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:09'!beginTransaction
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:09'!start
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:09'!commit
	self subclassResponsibility! !!CustomerSystem methodsFor: 'importing' stamp: 'FourcadeGaston 11/22/2017 21:09'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock
	self subclassResponsibility! !!CustomerSystem methodsFor: 'asserting' stamp: 'FourcadeGaston 11/22/2017 21:09'!allCustomersSize
	self subclassResponsibility! !!CustomerSystem methodsFor: 'importing - private - customer' stamp: 'FourcadeGaston 11/22/2017 21:09'!addCustomer: localNewCustomer
	self subclassResponsibility! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Environment methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 11:02'!createSupplierSystem	self shouldBeImplemented ! !!Environment methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/22/2017 21:25'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'testing' stamp: 'FourcadeGaston 11/22/2017 21:25'!isCurrent	self subclassResponsibility ! !!Environment class methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/22/2017 21:21'!current		^self allSubclasses 		detect: [ :anEnvironmentClass | anEnvironmentClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment found' ]! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 11:02'!createSupplierSystem	^TransientSupplierSystem new.! !!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/22/2017 21:23'!createCustomerSystem		^TransientCustomerSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/22/2017 21:22'!isCurrent		^IntegrationEnvironment isCurrent not! !Object subclass: #Importer	instanceVariableNames: 'line readStream record system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Importer methodsFor: 'testing' stamp: 'GianZamboni 11/23/2017 12:04'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!Importer methodsFor: 'testing' stamp: 'GianZamboni 11/23/2017 12:06'!importRecord		self subclassResponsibility ! !!Importer methodsFor: 'testing' stamp: 'GianZamboni 11/23/2017 12:06'!import		[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord.	 ]! !!Importer methodsFor: 'testing' stamp: 'GianZamboni 11/23/2017 12:08'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!Importer methodsFor: 'testing' stamp: 'GianZamboni 11/23/2017 12:05'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!Importer methodsFor: 'testing' stamp: 'GianZamboni 11/23/2017 15:12'!initializeOn: aReadStream on: aSystem	readStream := aReadStream.	system := aSystem .! !!Importer methodsFor: 'testing' stamp: 'GianZamboni 11/23/2017 12:10'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Importer class	instanceVariableNames: ''!!Importer class methodsFor: 'error descriptions' stamp: 'GianZamboni 11/23/2017 12:12'!from: aReadStream on: aCustomerSystem	^self new initializeOn: aReadStream on: aCustomerSystem ! !!Importer class methodsFor: 'error descriptions' stamp: 'GianZamboni 11/23/2017 12:11'!invalidRecordTypeErrorDescription		^'Invalid record type'! !Importer subclass: #CustomerImporter	instanceVariableNames: 'newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'initialization' stamp: 'FourcadeGaston 11/22/2017 21:03'!initializeOn: aReadStream on: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem .! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'FourcadeGaston 11/22/2017 21:07'!importCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	system addCustomer: newCustomer! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'FourcadeGaston 11/22/2017 21:02'!from: aReadStream on: aCustomerSystem	^self new initializeOn: aReadStream on: aCustomerSystem ! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/22/2017 21:22'!createCustomerSystem		^PersistentCustomerSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'FourcadeGaston 11/22/2017 21:23'!isCurrent		^false! !CustomerSystem subclass: #PersistentCustomerSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentCustomerSystem methodsFor: 'importing' stamp: 'FourcadeGaston 11/22/2017 21:08'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	^ customers size = 1		ifTrue: [ customers anyOne ]		ifFalse: noneBlock! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 20:41'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:08'!commit	session commit! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:08'!start	session open! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:08'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping)! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 20:41'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:08'!stop	session close! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:08'!beginTransaction	session beginTransaction! !!PersistentCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 20:44'!initialize	super initialize.	self initializeSession! !!PersistentCustomerSystem methodsFor: 'customers' stamp: 'FourcadeGaston 11/22/2017 21:18'!isCustomersEmpty	^ (session selectAllOfType: Customer) isEmpty! !!PersistentCustomerSystem methodsFor: 'asserting' stamp: 'FourcadeGaston 11/22/2017 21:18'!allCustomersSize	^ (session selectAllOfType: Customer) size! !!PersistentCustomerSystem methodsFor: 'importing - private - customer' stamp: 'FourcadeGaston 11/22/2017 21:08'!addCustomer: localNewCustomer	session persist: localNewCustomer! !Object subclass: #Supplier	instanceVariableNames: 'name identificationType idNumber customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'initialization' stamp: 'FourcadeGaston 11/23/2017 17:05'!initialize	super initialize.	customers := OrderedCollection new.! !!Supplier methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 12:29'!idNumber: anIdentificationNumber	idNumber := anIdentificationNumber ! !!Supplier methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:04'!addCustomer: aCustomer 		customers add: aCustomer.! !!Supplier methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 12:26'!name: aName 		name := aName! !!Supplier methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 12:28'!idType: anIdType	identificationType := anIdType ! !!Supplier methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:19'!getCustomerWithId: anIdNumber 		^ customers detect: [ :aCustomer | aCustomer identificationNumber = anIdNumber ] ifFound: [ :aCustomer | ^aCustomer ] ifNone: [ self error: self class customerDoesNotExistErrorDescription ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Supplier class	instanceVariableNames: ''!!Supplier class methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:20'!customerDoesNotExistErrorDescription		^ 'User does not exists'! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImportTest methodsFor: 'tests' stamp: 'FourcadeGaston 11/23/2017 17:25'!setUp	system := Environment current createSupplierSystem.	system start.	system beginTransaction.		(SupplierImporter from: (ReadStream on: 'S,Supplier1,D,123	NC,Pepe,Sanchez,D,5456774') on: system) import.! !!SupplierImportTest methodsFor: 'tests' stamp: 'GianZamboni 11/23/2017 11:16'!validTestData	^ ReadStream  on: 'S,Supplier1,D,123 NC,Pepe,Sanchez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAs A,Maipu,888,Florida,1122,Buenos Aires'.! !!SupplierImportTest methodsFor: 'tests' stamp: 'GianZamboni 11/23/2017 11:59'!test01ImportSupplier	self importDataFrom: self validTestData.		self assertImportedSuppliedSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertUserWithId5456774WasModifiedCorrectly.! !!SupplierImportTest methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 12:20'!importDataFrom: inputStream 		(SupplierImporter from: inputStream on: system) import.! !Importer subclass: #SupplierImporter	instanceVariableNames: 'newSupplier newCustomer'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImporter methodsFor: 'testing' stamp: 'FourcadeGaston 11/23/2017 17:10'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExisitingCustomerRecord ifTrue: [ ^self selectExistingCustomer ].	self signalInvalidRecordType! !!SupplierImporter methodsFor: 'testing' stamp: 'FourcadeGaston 11/23/2017 16:53'!isExisitingCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'as yet unclassified ' stamp: 'GianZamboni 11/23/2017 12:31'!assertValidCustomerRecordSize	record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'as yet unclassified ' stamp: 'GianZamboni 11/23/2017 15:14'!initializeOn: aReadStream on: aSystem		super initializeOn: aReadStream on: aSystem.! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:03'!importNewCustomer	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	newSupplier addCustomer: newCustomer! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:10'!selectExistingCustomer		newCustomer := newSupplier getCustomerWithId: (record third).! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 12:29'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:33'!importSupplier	| supplierIdNumber |	self assertValidSupplierRecordSize.	supplierIdNumber := record third.	(system existsSupplierIdentifiedAs: supplierIdNumber)		ifTrue: [ newSupplier := system supplierIdentifiedAs: supplierIdNumber  ]		ifFalse: [ newSupplier := Supplier new.	newSupplier name: record second.	newSupplier idType: record third.	newSupplier idNumber: record fourth.	system addSupplier: newSupplier.	 ].	! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 12:20'!isSupplierRecord		^ record first = 'S'! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 12:26'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierrRecord ].! !Object subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierSystem methodsFor: 'setup-teardown' stamp: 'GianZamboni 11/23/2017 11:13'!beginTransaction	self shouldBeImplemented.! !!SupplierSystem methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 15:06'!addCustomer: aCustomer 	self shouldBeImplemented.! !!SupplierSystem methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 11:02'!start	self shouldBeImplemented.! !!SupplierSystem methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:35'!existsSupplierIdentifiedAs: anIdentifiacationNumber 	self subclassResponsibility.! !SupplierSystem subclass: #PersistentSupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientCustomerSystem methodsFor: 'importing' stamp: 'FourcadeGaston 11/22/2017 21:14'!customerIdentifiedAs: anIdType numbered: anIdNumber ifNone: noneClosure 		^customers		detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdType numbered: anIdNumber ]		ifFound: [ :aCustomer | aCustomer ]		ifNone: noneClosure! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:15'!commit! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:12'!addCustomer: newCustomer	customers add: newCustomer! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:11'!start		customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:16'!stop! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:11'!beginTransaction! !!TransientCustomerSystem methodsFor: 'setup-teardown' stamp: 'FourcadeGaston 11/22/2017 21:16'!initialize! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'FourcadeGaston 11/22/2017 21:16'!isCustomersEmpty		^customers isEmpty! !!TransientCustomerSystem methodsFor: 'asserting' stamp: 'FourcadeGaston 11/22/2017 21:17'!allCustomersSize		^customers size! !SupplierSystem subclass: #TransientSupplierSystem	instanceVariableNames: 'suppliers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientSupplierSystem methodsFor: 'setup-teardown' stamp: 'GianZamboni 11/23/2017 11:12'!beginTransaction! !!TransientSupplierSystem methodsFor: 'adding' stamp: 'GianZamboni 11/23/2017 15:27'!addCustomer: newCustomer	customers add: newCustomer! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'GianZamboni 11/23/2017 15:28'!start	suppliers := OrderedCollection new.	customers := OrderedCollection new.! !!TransientSupplierSystem methodsFor: 'as yet unclassified' stamp: 'FourcadeGaston 11/23/2017 17:38'!existsSupplierIdentifiedAs: anIdentificationNumber 		^ suppliers detect: [ :aSupplier | aSupplier idNumber = anIdentificationNumber  ]! !